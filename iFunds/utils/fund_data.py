#!/usr/bin/env python
# -*- coding:utf-8 -*-
# @FileName  :fund_data.py
# @Time      :10/12/21 1:39 PM
# @Author    :Zhidong R
import datetime
import time
import requests
import re
import json
import pandas as pd
from collections import OrderedDict
from iFunds.utils.transform import str_to_dlt

"""
天天基金接口
获取基金的简要实时信息：http://fundgz.1234567.com.cn/js/基金代号.js?rt=1636019115063
获取基金的详细信息：http://fund.eastmoney.com/pingzhongdata/基金代号.js
获取所有基金的代码和名字：http://fund.eastmoney.com/js/fundcode_search.js
获取基金经理的信息：http://fund.eastmoney.com/Data/FundDataPortfolio_Interface.aspx?dt=14&mc=returnjson&ft=all&input=经理名字
获取指数的实时情况：http://push2.eastmoney.com/api/qt/stock/trends2/get?secid=1.000001&fields1=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13&fields2=f51,f52,f53,f54,f55,f56,f57,f58&ut=e1e6871893c6386c5ff6967026016627&iscr=0&cb=cb_1636081485941_61628666&isqhquote=&cb_1636081485941_61628666=cb_1636081485941_61628666
"""


def get_url_response_text(url):
    """
    封裝爬蟲函數，多次訪問，穩定爬到數據
    :param url:
    :return: str,或者失敗False
    """
    # 循环保持访问的稳定性
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
    }
    for loop in range(20):
        try:
            response = requests.get(url=url, headers=headers)
        except Exception as e:
            time.sleep(0.05)
        else:
            time.sleep(0.05)
            break
    if str(response.status_code) != "200":
        return False

    context = response.text
    return context


class FundData(object):

    @staticmethod
    def get_all_funds(self):
        """
        获取所有基金的code和名字，返回键值对
        :return: dict, {基金代号：基金名字}，如{'000001': '华夏成长混合', '000002': '华夏成长混合(后端)', '000003': '中海可转债债券A'}
        """
        url = "http://fund.eastmoney.com/js/fundcode_search.js"
        content = get_url_response_text(url)
        pattern = r'var r = (.*);'
        search = re.findall(pattern, content)
        for string in search:
            data_ls = str_to_dlt(string)
        data_dict = {}
        for data in data_ls:
            data_dict[data[0]] = data[2]
        return data_dict

    def get_detail_data(self, fund_code="", fund_name="", str_flag=True, dataframe_flag=False):
        """
        获取单个基金的详细数据
        :param fund_code: 基金代码
        :param fund_name: 基金名字
        :param str_flag: 是否将value值转化为str，默认为True: dict= {"a": "[1,2,3,4]"}; 设置为False时，dict= {"a": [1,2,3,4]}
        :return:  json类型的字典，
        """
        if (not fund_code) and (not fund_name):
            return None
        if (not fund_code) and fund_name:
            data_dict = self.get_all_funds()
            for key, value in data_dict.items():
                if fund_name == value:
                    fund_code = key
                    break

        df = pd.DataFrame(columns=("fund_code",
                                   "fund_name",
                                   "source_rate",
                                   "rate",
                                   "min_pn",
                                   "syl_1y",
                                   "syl_6m",
                                   "syl_3m",
                                   "syl_1m",
                                   "shares_positions",
                                   "net_worth_trend",
                                   "ac_worth_trend",
                                   "grand_total",
                                   "rate_in_similar_type",
                                   "rate_in_similar_present",
                                   "fluctuation_scale",
                                   "holder_structure",
                                   "asset_allocation",
                                   "performance_evaluation",
                                   "current_fund_manager",
                                   "buy_sedemption",
                                   "swithSameType"
                                   ))
        fund_dict_data = OrderedDict()

        if fund_code:
            url = "http://fund.eastmoney.com/pingzhongdata/%s.js" % str(fund_code)
            content = get_url_response_text(url)
            if not content:
                return False
            dict_real_data = self.get_real_fund_data(fund_code=fund_code)

            pattern = r'(?<=fS_code = ")(.*?)(?=";)'  # fS_code = "379010"
            search_code = re.findall(pattern, content)
            if search_code:
                actual_code = search_code[0].strip()
                fund_dict_data["fund_code"] = actual_code

            # fS_name = "上投摩根中小盘混合"
            pattern = r'(?<=fS_name = ")(.*?)(?=";)'  # fS_name = "上投摩根中小盘混合"
            search_name = re.findall(pattern, content)
            if search_name:
                actual_name = search_name[0].strip()
                fund_dict_data["fund_name"] = actual_name

            if dict_real_data:
                fund_dict_data["current_price"] = dict_real_data.get("current_price")
                fund_dict_data["price_time"] = dict_real_data.get("price_time")

            pattern = r'(?<=fund_sourceRate=")(.*?)(?=";)'  # fund_sourceRate="1.50"
            search_sourceRate = re.findall(pattern, content)
            if search_sourceRate:
                actual_sourceRate = search_sourceRate[0].strip()
                fund_dict_data["source_rate"] = actual_sourceRate

            pattern = r'(?<=fund_Rate=")(.*?)(?=";)'  # fund_Rate="0.15"
            search_Rate = re.findall(pattern, content)
            if search_Rate:
                actual_Rate = search_Rate[0].strip()
                fund_dict_data["rate"] = actual_Rate

            pattern = r'(?<=fund_minsg=")(.*?)(?=";)'  # fund_minsg="10"
            search_minsg = re.findall(pattern, content)
            if search_minsg:
                actual_minsg = search_minsg[0].strip()
                fund_dict_data["min_pn"] = actual_minsg

            # stockCodesNew =["1.603486","1.603501","1.603259","0.300750","1.688169","0.300014","0.000661","1.603799","1.600809","0.300724"]
            pattern = r'(?<=stockCodesNew =)(.*?)(?=;)'
            search_stockCodes = re.findall(pattern, content)
            if search_stockCodes:
                actual_stockCodes = str_to_dlt(search_stockCodes[0].strip())
                fund_dict_data["stock_codes"] = actual_stockCodes

            pattern = r'(?<=syl_1n=")(.*?)(?=";)'  # syl_1n="12.37"
            search_syl_1n = re.findall(pattern, content)
            if search_syl_1n:
                actual_syl_1n = search_syl_1n[0].strip()
                fund_dict_data["syl_1y"] = actual_syl_1n

            pattern = r'(?<=syl_6y=")(.*?)(?=";)'  # syl_6y="-11.48"
            search_syl_6y = re.findall(pattern, content)
            if search_syl_6y:
                actual_syl_6y = search_syl_6y[0].strip()
                fund_dict_data["syl_6m"] = actual_syl_6y

            pattern = r'(?<=syl_3y=")(.*?)(?=";)'  # syl_3y="-11.48"
            search_syl_3y = re.findall(pattern, content)
            if search_syl_3y:
                actual_syl_3y = search_syl_3y[0].strip()
                fund_dict_data["syl_3m"] = actual_syl_3y

            pattern = r'(?<=syl_1y=")(.*?)(?=";)'  # syl_3y="-11.48"
            search_syl_1y = re.findall(pattern, content)
            if search_syl_1y:
                actual_syl_1y = search_syl_1y[0].strip()
                fund_dict_data["syl_1m"] = actual_syl_1y

            # 仓位测算图
            # Data_fundSharesPositions = [[1631462400000,62.1900],[1631548800000,62.1900],[1631635200000,62.1900],[1631721600000,74.6100],[1631808000000,82.8600],[1632240000000,90.8800],[1632326400000,90.8800],[1632412800000,90.8800],[1632672000000,90.8800],[1632758400000,90.8800],[1632844800000,97.3600],[1632931200000,95.00],[1633622400000,86.8700],[1633881600000,91.5500]]
            pattern = r'(?<=Data_fundSharesPositions = )(.+?)(?=;)'  # pattern = r'Data_fundSharesPositions = (.+?);'
            search_SharesPositions = re.findall(pattern, content)
            if search_SharesPositions:
                actual_SharesPositions = str_to_dlt(search_SharesPositions[0].strip())
                fund_dict_data["shares_positions"] = actual_SharesPositions

            # 单位净值走势
            # Data_netWorthTrend = [{"x":1232467200000,"y":1.0,"equityReturn":0,"unitMoney":""},{"x":1232640000000,"y":0.999,"equityReturn":-0.1,"unitMoney":""},{"x":1233849600000,"y":1.028,"equityReturn":2.9029,"unitMoney":""},{},{}]
            pattern = r'(?<=Data_netWorthTrend = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_netWorthTrend = re.findall(pattern, content)
            if search_netWorthTrend:
                actual_netWorthTrend = str_to_dlt(search_netWorthTrend[0].strip())
                fund_dict_data["net_worth_trend"] = actual_netWorthTrend

            # 累计净值走势
            # Data_ACWorthTrend = [[1232467200000,1.0],[1232640000000,0.999],[1233849600000,1.028],[1234454400000,1.102],
            pattern = r'(?<=Data_ACWorthTrend = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_ACWorthTrend = re.findall(pattern, content)
            if search_ACWorthTrend:
                actual_ACWorthTrend = str_to_dlt(search_ACWorthTrend[0].strip())
                fund_dict_data["ac_worth_trend"] = actual_ACWorthTrend

            # 累计收益走势
            # Data_grandTotal = [{"name":"上投摩根中小盘混合","data":[[1617897600000,0],[1618156800000,-2.22],[1618243200000,-1.45],[1618329600000,-0.61],[1618416000000,-1.47],[1618502400000,-1.22],[1618761600000,1.74],[1618848000000,2.22],[1618934400000,2.57],[1619020800000,3.30],[1619107200000,5.00],
            pattern = r'(?<=Data_grandTotal = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_grandTotal = re.findall(pattern, content)
            if search_grandTotal:
                actual_grandTotal = str_to_dlt(search_grandTotal[0].strip())
                fund_dict_data["grand_total"] = actual_grandTotal

            # 同类排名走势
            pattern = r'(?<=Data_rateInSimilarType = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_rateInSimilarType = re.findall(pattern, content)
            if search_rateInSimilarType:
                actual_rateInSimilarType = str_to_dlt(search_rateInSimilarType[0].strip())
                fund_dict_data["rate_in_similar_type"] = actual_rateInSimilarType

            # 同类排名百分比
            pattern = r'(?<=Data_rateInSimilarPersent=)(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_rateInSimilarPersent = re.findall(pattern, content)
            if search_rateInSimilarPersent:
                actual_rateInSimilarPersent = str_to_dlt(search_rateInSimilarPersent[0].strip())
                fund_dict_data["rate_in_similar_present"] = actual_rateInSimilarPersent

            # 规模变动
            pattern = r'(?<=Data_fluctuationScale =)(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_fluctuationScale = re.findall(pattern, content)
            if search_fluctuationScale:
                actual_fluctuationScale = json.loads(search_fluctuationScale[0].strip())
                fund_dict_data["fluctuation_scale"] = actual_fluctuationScale

            # 持有人结构
            pattern = r'(?<=Data_holderStructure =)(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_holderStructure = re.findall(pattern, content)
            if search_holderStructure:
                actual_holderStructure = json.loads(search_holderStructure[0].strip())
                fund_dict_data["holder_structure"] = actual_fluctuationScale

            # 资产配置
            pattern = r'(?<=Data_assetAllocation = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_assetAllocation = re.findall(pattern, content)
            if search_assetAllocation:
                actual_assetAllocation = json.loads(search_assetAllocation[0].strip())
                fund_dict_data["asset_allocation"] = actual_assetAllocation

            # 业绩评价
            pattern = r'(?<=Data_performanceEvaluation = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_performanceEvaluation = re.findall(pattern, content)
            if search_performanceEvaluation:
                actual_performanceEvaluation = json.loads(search_performanceEvaluation[0].strip())
                fund_dict_data["performance_evaluation"] = actual_performanceEvaluation

            # 现任基金经理
            pattern = r'(?<=var Data_currentFundManager =)(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_currentFundManager = re.findall(pattern, content)
            if search_currentFundManager:
                actual_currentFundManager = str_to_dlt(search_currentFundManager[0].replace('null', '""').strip())
                fund_dict_data["current_fund_manager"] = actual_currentFundManager

            # 申赎购汇
            pattern = r'(?<=Data_buySedemption =)(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_buySedemption = re.findall(pattern, content)
            if search_buySedemption:
                actual_buySedemption = json.loads(search_buySedemption[0].strip())
                fund_dict_data["buy_sedemption"] = actual_buySedemption

            # 同类型基金涨幅榜
            pattern = r'(?<=swithSameType = )(.*?)(?=;)'  # pattern = r'Data_netWorthTrend = [(.+?)]'
            search_swithSameType = re.findall(pattern, content)
            if search_swithSameType:
                actual_swithSameType = str_to_dlt(search_swithSameType[0].strip())
                fund_dict_data["swithSameType"] = actual_swithSameType

            # 为DataFrame增加一行数据
            # df.append(pandas.DataFrame(fund_dict_data), ignore_index=True)
            invalid_key = []
            for key in fund_dict_data:
                value = fund_dict_data[key]
                if value == "":
                    invalid_key.append(key)
                # if isinstance(dict(), type(value)) or isinstance(list(), type(value)):
                #     fund_dict_data[key] = "%s" % value
                fund_dict_data[key] = "%s" % value
            for _ in invalid_key:  # 去除无效的Key和value
                fund_dict_data.pop(_)
            df = df.append(fund_dict_data, ignore_index=True)
            if dataframe_flag:
                return df
            else:
                return fund_dict_data

    def get_real_fund_data(self, fund_code, fund_name=""):
        """
        获取基金的实时信息
        :param fund_code:
        :param fund_name:
        :return:
        """
        # 获取现在时间戳
        now_time = int(time.time()) * 1000
        # http://fundgz.1234567.com.cn/js/基金代号.js?rt=1636019115063
        url = str.format(r"http://fundgz.1234567.com.cn/js/{}.js?rt={}", fund_code, now_time)
        content = get_url_response_text(url)
        if not content:
            return False
        # content = 'jsonpgz({"fundcode":"001766","name":"涓婃姇鎽╂牴鍖荤枟鍋ュ悍鑲＄エ","jzrq":"2021-11-03","dwjz":"2.4881","gsz":"2.4728","gszzl":"-0.62","gztime":"2021-11-04 15:00"});'
        pattern = r'(?<=jsonpgz\()(.*?)(?=\);)'  # syl_3y="-11.48"
        json_data_ls = re.findall(pattern, content)
        if json_data_ls and json_data_ls[0] != "":
            fund_dict = {}
            for json_data in json_data_ls:
                dict_data = str_to_dlt(json_data)
            fund_dict["fund_code"] = dict_data.get("fundcode")
            fund_dict["fund_name"] = dict_data.get("name")
            fund_dict["current_price"] = dict_data.get("dwjz")
            fund_dict["price_time"] = dict_data.get("jzrq")
            fund_dict["estimate_worth"] = dict_data.get("gsz")
            fund_dict["estimate_increase"] = dict_data.get("gszzl")
            fund_dict["time_estimate_worth"] = dict_data.get("gztime")
            return fund_dict
        else:
            return False

    def get_generate_data(self, fund_code=None):
        """
        获取大盘指数的数据
        :param fund_code: 默认为None,d
        :return: json类型的字典
        """
        def get_data(url):
            dict_temp = {}
            content = get_url_response_text(url)
            if not content:
                return False
            # cb_1636081485941_61628666({"rc":0,"rt":10,"svr":180606317,"lt":1,"full":1,"data":{"code":"000001","market":1,"type":1,"status":0,"name":"上证指数","decimal":2,"preSettlement":0.0,"preClose":3282.72,"beticks":"33300|34200|54000|34200|41400|46800|54000","trendsTotal":241,"time":1649231980,"kind":2,"prePrice":3282.72,"trends":["2022-04-06 09:30,3269.43,3269.43,3269.43,3269.43,4873454,4628906496.00,3279.878","2022-04-06 09:31,3268.33,3270.47,3271.42,3268.33,13873752,12918125568.00,3279.171","2022-04-06 09:32,3270.55,3268.21,3270.91,3268.21,7355105,7574986496.00,3276.582","2022-04-06 09:33,3267.51,3267.86,3268.01,3266.97,6226503,6546716160.00,3278.222","2022-04-06 09:34,3267.45,3268.38,3268.61,3267.39,6355015,6529857536.00,3281.303","2022-04-06 09:35,3268.32,3268.99,3268.99,3268.06,5089502,5307443456.00,3280.430","2022-04-06 09:36,3269.36,3267.51,3269.36,3266.90,5190375,5375854080.00,3283.034","2022-04-06 09:37,3267.38,3265.50,3267.59,3265.50,5893022,5728721408.00,3283.578","2022-04-06 09:38,3265.08,3265.41,3265.73,3264.88,5453342,5377533952.00,3283.671","2022-04-06 09:39,3265.51,3264.56,3265.51,3264.56,5552943,5617814528.00,3286.827","2022-04-06 09:40,3264.65,3266.64,3266.87,3264.51,4969158,5113239808.00,3289.949","2022-04-06 09:41,3265.68,3267.64,3267.64,3263.74,4529156,4767760128.00,3291.823","2022-04-06 09:42,3268.14,3271.30,3271.30,3268.14,3781483,4126288064.00,3292.299","2022-04-06 09:43,3271.27,3274.86,3274.86,3271.27,3923727,4100534944.00,3293.230","2022-04-06 09:44,3275.59,3276.54,3278.24,3275.59,3880798,4050792048.00,3294.304","2022-04-06 09:45,3276.91,3278.59,3279.11,3276.64,3256451,3325948192.00,3297.162","2022-04-06 09:46,3279.04,3275.38,3279.04,3275.38,3744416,3854232656.00,3296.098","2022-04-06 09:47,3274.68,3274.05,3274.68,3273.52,3342040,3456421696.00,3294.708","2022-04-06 09:48,3274.17,3276.03,3276.03,3274.17,3633068,3490269008.00,3297.629","2022-04-06 09:49,3276.05,3274.09,3276.05,3273.76,3342703,3428261456.00,3297.781","2022-04-06 09:50,3274.52,3276.44,3276.44,3274.32,2821149,2984533488.00,3299.622","2022-04-06 09:51,3275.97,3274.84,3275.97,3273.45,3622503,3934391856.00,3300.300","2022-04-06 09:52,3275.34,3275.55,3276.25,3275.34,3177504,3358011424.00,3301.501","2022-04-06 09:53,3275.20,3276.47,3276.47,3274.85,2897750,3128303648.00,3301.064","2022-04-06 09:54,3276.18,3278.56,3278.56,3276.18,2483330,2608738896.00,3301.948","2022-04-06 09:55,3279.29,3276.79,3279.29,3276.41,2559281,2708954016.00,3301.399","2022-04-06 09:56,3276.87,3275.68,3277.23,3275.68,2561589,2584239696.00,3300.286","2022-04-06 09:57,3274.59,3276.11,3276.26,3274.42,2665577,2668953952.00,3298.846","2022-04-06 09:58,3276.44,3277.25,3277.27,3275.99,2305006,2390315440.00,3299.481","2022-04-06 09:59,3276.73,3278.74,3278.96,3276.68,2270006,2376557696.00,3301.009","2022-04-06 10:00,3277.82,3274.12,3277.82,3273.73,2819068,2862888368.00,3297.760","2022-04-06 10:01,3272.18,3271.92,3272.18,3270.01,3346214,3350718672.00,3297.071","2022-04-06 10:02,3271.96,3270.30,3271.96,3270.02,2274862,2442910928.00,3296.083","2022-04-06 10:03,3270.26,3272.06,3272.06,3270.04,2180499,2251362128.00,3296.602","2022-04-06 10:04,3272.01,3267.70,3272.01,3267.70,2430366,2559546912.00,3292.905","2022-04-06 10:05,3267.63,3270.00,3270.67,3267.48,2068900,2342411376.00,3294.465","2022-04-06 10:06,3269.87,3269.42,3270.70,3268.89,1783929,1956528640.00,3294.198","2022-04-06 10:07,3269.79,3271.09,3271.71,3269.70,1907676,1965734640.00,3295.351","2022-04-06 10:08,3270.77,3269.49,3270.77,3268.36,2097122,2288386512.00,3294.692","2022-04-06 10:09,3269.64,3269.90,3270.60,3269.38,1943582,2053190416.00,3295.700","2022-04-06 10:10,3269.85,3269.39,3270.71,3269.39,2034339,2136864448.00,3296.158","2022-04-06 10:11,3269.53,3268.78,3269.53,3268.50,1919451,2137779248.00,3294.800","2022-04-06 10:12,3268.74,3267.99,3268.74,3267.75,1813871,1992286784.00,3294.275","2022-04-06 10:13,3267.59,3265.82,3267.59,3265.82,2131344,2160092880.00,3291.192","2022-04-06 10:14,3265.18,3264.98,3265.20,3264.37,1849395,2052376720.00,3290.515","2022-04-06 10:15,3264.93,3264.52,3265.26,3264.52,1633215,1845101616.00,3290.107","2022-04-06 10:16,3264.83,3263.30,3264.83,3263.05,1947662,2228568016.00,3287.992","2022-04-06 10:17,3262.62,3259.41,3262.62,3259.41,2166278,2376515248.00,3284.755","2022-04-06 10:18,3259.68,3262.68,3262.68,3259.68,1985726,2245170320.00,3288.001","2022-04-06 10:19,3262.36,3260.16,3262.36,3260.16,1453932,1824187536.00,3286.228","2022-04-06 10:20,3260.14,3261.55,3261.90,3260.14,1309287,1605667296.00,3287.101","2022-04-06 10:21,3261.98,3260.34,3261.98,3259.49,1613894,1796083888.00,3286.113","2022-04-06 10:22,3260.80,3264.08,3264.08,3260.80,1433965,1652359088.00,3288.807","2022-04-06 10:23,3264.06,3262.74,3264.18,3261.93,1377028,1669531264.00,3288.442","2022-04-06 10:24,3262.63,3264.06,3264.06,3262.42,1165198,1400950000.00,3289.183","2022-04-06 10:25,3264.23,3263.13,3264.28,3263.13,1386042,1577076704.00,3289.389","2022-04-06 10:26,3262.23,3262.18,3262.67,3261.10,1470601,1779075904.00,3288.218","2022-04-06 10:27,3262.36,3262.90,3263.73,3262.28,1253764,1588211168.00,3288.784","2022-04-06 10:28,3262.47,3261.92,3262.47,3261.21,1458737,1660160880.00,3288.557","2022-04-06 10:29,3262.48,3260.79,3262.48,3260.18,1507850,1545757136.00,3288.616","2022-04-06 10:30,3260.71,3261.23,3261.60,3260.32,1396233,1495895584.00,3288.400","2022-04-06 10:31,3260.55,3257.81,3260.55,3257.39,2014461,2342188176.00,3285.187","2022-04-06 10:32,3257.43,3256.87,3258.16,3255.69,1841845,2094412512.00,3284.638","2022-04-06 10:33,3257.02,3256.99,3257.02,3256.03,1579185,1732600928.00,3285.414","2022-04-06 10:34,3257.33,3256.52,3258.36,3256.52,1591641,1699065824.00,3286.599","2022-04-06 10:35,3256.84,3257.12,3257.41,3256.49,1151812,1331039120.00,3286.370","2022-04-06 10:36,3256.98,3259.08,3259.08,3256.86,1297683,1409743104.00,3288.856","2022-04-06 10:37,3259.11,3258.87,3260.03,3258.87,1384386,1422032192.00,3289.257","2022-04-06 10:38,3258.15,3260.33,3260.33,3258.12,1150109,1220928256.00,3289.820","2022-04-06 10:39,3260.36,3261.90,3261.97,3260.36,1119567,1146798384.00,3291.139","2022-04-06 10:40,3261.84,3260.31,3261.84,3260.06,1094526,1267049024.00,3290.496","2022-04-06 10:41,3260.89,3260.49,3260.89,3260.17,1117912,1266203264.00,3290.352","2022-04-06 10:42,3259.92,3258.52,3260.15,3258.44,1302960,1500540736.00,3289.803","2022-04-06 10:43,3258.60,3259.68,3260.07,3258.60,1316141,1322573616.00,3290.374","2022-04-06 10:44,3259.99,3261.37,3261.38,3259.59,1032986,1184245712.00,3291.522","2022-04-06 10:45,3260.96,3261.55,3261.55,3260.18,1066487,1250452672.00,3291.686","2022-04-06 10:46,3262.24,3261.41,3262.24,3261.25,1090856,1193421792.00,3291.919","2022-04-06 10:47,3261.99,3263.59,3263.61,3261.38,986394,1202363712.00,3293.348","2022-04-06 10:48,3263.94,3265.05,3265.05,3263.32,1050494,1196814432.00,3294.253","2022-04-06 10:49,3264.59,3261.92,3264.59,3261.88,1096101,1217440528.00,3292.992","2022-04-06 10:50,3262.23,3260.25,3262.57,3260.03,1014478,1199218816.00,3292.132","2022-04-06 10:51,3260.69,3261.62,3261.62,3260.69,1063521,1094633552.00,3292.885","2022-04-06 10:52,3261.39,3261.09,3261.39,3260.72,832520,964245808.00,3292.426","2022-04-06 10:53,3260.83,3261.62,3261.62,3260.62,1048749,1020745936.00,3292.280","2022-04-06 10:54,3261.78,3261.18,3262.10,3261.18,833497,944002128.00,3292.341","2022-04-06 10:55,3261.38,3261.85,3262.25,3261.28,960505,1018741856.00,3292.812","2022-04-06 10:56,3262.05,3261.96,3262.21,3261.54,816159,916442112.00,3292.314","2022-04-06 10:57,3261.98,3262.79,3262.96,3261.98,935722,1059007824.00,3292.947","2022-04-06 10:58,3262.56,3263.78,3263.78,3262.56,866122,937352976.00,3293.541","2022-04-06 10:59,3264.11,3264.31,3264.61,3263.90,842070,940925152.00,3294.028","2022-04-06 11:00,3264.83,3265.95,3265.95,3264.83,850602,935942256.00,3295.004","2022-04-06 11:01,3265.78,3267.32,3267.32,3265.46,959303,1048049712.00,3295.990","2022-04-06 11:02,3267.50,3267.54,3268.16,3267.50,961462,1082310176.00,3297.056","2022-04-06 11:03,3267.61,3266.86,3267.61,3266.82,912430,1015251440.00,3296.615","2022-04-06 11:04,3266.65,3265.57,3266.65,3264.79,1016734,1097373920.00,3294.953","2022-04-06 11:05,3265.49,3266.05,3266.18,3265.49,820889,844868544.00,3295.671","2022-04-06 11:06,3266.18,3265.94,3266.51,3265.77,722910,792158528.00,3295.894","2022-04-06 11:07,3265.70,3264.49,3265.70,3263.67,932283,1093530496.00,3294.343","2022-04-06 11:08,3264.36,3264.50,3264.50,3263.81,755965,866300096.00,3294.345","2022-04-06 11:09,3264.68,3265.30,3265.44,3264.53,743175,808241328.00,3295.053","2022-04-06 11:10,3265.24,3268.16,3268.16,3265.24,1008810,1029170384.00,3296.904","2022-04-06 11:11,3268.36,3270.03,3270.03,3268.36,1425202,1284009904.00,3298.886","2022-04-06 11:12,3270.06,3270.41,3270.41,3269.38,1054990,973755808.00,3299.188","2022-04-06 11:13,3270.08,3271.17,3271.17,3270.00,877936,886712816.00,3299.495","2022-04-06 11:14,3271.00,3270.35,3271.00,3270.16,864671,983554912.00,3299.204","2022-04-06 11:15,3270.41,3271.34,3272.02,3270.41,958421,987004496.00,3300.104","2022-04-06 11:16,3272.37,3273.18,3273.18,3271.89,1071646,1019436240.00,3300.939","2022-04-06 11:17,3273.37,3273.94,3274.05,3273.32,1423469,1140561728.00,3301.399","2022-04-06 11:18,3273.98,3275.04,3275.04,3273.98,1100733,971027920.00,3301.894","2022-04-06 11:19,3275.13,3274.20,3275.27,3273.83,1532625,1167322112.00,3301.574","2022-04-06 11:20,3274.09,3274.88,3274.88,3274.09,1089469,941002928.00,3302.046","2022-04-06 11:21,3274.62,3274.29,3274.83,3273.84,1166061,1052318752.00,3301.651","2022-04-06 11:22,3273.70,3274.64,3274.65,3273.70,993055,930334256.00,3301.664","2022-04-06 11:23,3274.53,3274.35,3274.95,3274.03,890631,895992912.00,3301.586","2022-04-06 11:24,3274.19,3273.87,3274.51,3273.63,876793,876032528.00,3301.429","2022-04-06 11:25,3273.67,3272.75,3273.83,3272.75,850257,933471744.00,3301.106","2022-04-06 11:26,3272.85,3273.10,3273.25,3272.74,903245,878876016.00,3301.287","2022-04-06 11:27,3273.42,3274.13,3274.37,3273.19,1012178,922320384.00,3302.043","2022-04-06 11:28,3274.23,3275.06,3275.08,3273.90,1139401,994681184.00,3302.856","2022-04-06 11:29,3274.96,3274.69,3275.32,3274.58,1224568,1030087392.00,3302.930","2022-04-06 11:30,3274.59,3275.45,3275.45,3274.37,1564930,1214409328.00,3303.609","2022-04-06 13:01,3275.57,3273.53,3276.17,3273.53,4271152,3618388720.00,3302.492","2022-04-06 13:02,3273.21,3272.75,3273.69,3272.56,1363851,1323408304.00,3301.245","2022-04-06 13:03,3273.00,3274.26,3274.26,3273.00,1252602,1176909680.00,3302.178","2022-04-06 13:04,3274.35,3273.09,3274.49,3273.09,1344040,1264480368.00,3301.720","2022-04-06 13:05,3272.82,3274.66,3274.90,3272.82,1235395,1204664640.00,3302.010","2022-04-06 13:06,3274.64,3273.00,3274.64,3272.72,1264393,1240239824.00,3300.726","2022-04-06 13:07,3272.94,3272.99,3273.29,3272.20,1176522,1170208720.00,3300.352","2022-04-06 13:08,3272.93,3275.94,3276.15,3272.93,1323862,1318032432.00,3302.511","2022-04-06 13:09,3276.06,3277.46,3277.46,3275.78,1710542,1401396512.00,3303.213","2022-04-06 13:10,3277.70,3280.21,3280.21,3277.64,2176900,1698289360.00,3304.676","2022-04-06 13:11,3280.25,3279.85,3280.31,3279.20,1722120,1461632592.00,3304.641","2022-04-06 13:12,3279.70,3278.91,3279.84,3278.91,1602666,1397147008.00,3304.442","2022-04-06 13:13,3278.97,3278.92,3279.37,3278.29,1336773,1255251744.00,3304.140","2022-04-06 13:14,3278.63,3277.87,3278.63,3277.75,1258331,1152311376.00,3303.713","2022-04-06 13:15,3278.00,3277.29,3278.35,3277.27,1192625,1132421248.00,3303.084","2022-04-06 13:16,3277.48,3277.80,3278.00,3277.33,1131225,1132764512.00,3303.107","2022-04-06 13:17,3278.21,3278.34,3278.82,3278.21,1089998,1064289136.00,3303.825","2022-04-06 13:18,3278.22,3280.35,3280.35,3278.22,1153875,1111180448.00,3304.869","2022-04-06 13:19,3280.29,3281.53,3281.74,3280.29,1518602,1304850272.00,3306.036","2022-04-06 13:20,3281.74,3282.82,3282.82,3281.74,1598899,1312575184.00,3307.080","2022-04-06 13:21,3282.86,3284.30,3284.31,3282.86,1781873,1513839680.00,3308.036","2022-04-06 13:22,3284.24,3284.24,3284.77,3283.92,2081158,1612235648.00,3308.879","2022-04-06 13:23,3284.13,3283.69,3284.62,3283.33,1687620,1505730096.00,3308.379","2022-04-06 13:24,3283.31,3284.48,3284.48,3283.31,1676698,1420082304.00,3308.944","2022-04-06 13:25,3284.25,3283.08,3284.25,3283.08,1670075,1415181248.00,3308.765","2022-04-06 13:26,3283.22,3282.22,3283.23,3282.22,1674675,1446487136.00,3307.788","2022-04-06 13:27,3282.08,3282.60,3282.70,3281.99,1346155,1198779120.00,3307.340","2022-04-06 13:28,3282.31,3281.71,3282.52,3281.66,1248865,1186012976.00,3306.662","2022-04-06 13:29,3281.67,3280.17,3281.67,3280.17,1347829,1364162384.00,3305.365","2022-04-06 13:30,3280.32,3279.99,3280.48,3279.99,1227835,1139976224.00,3305.102","2022-04-06 13:31,3280.47,3280.16,3280.47,3279.41,1400834,1461377296.00,3303.613","2022-04-06 13:32,3280.34,3281.96,3282.13,3280.34,1265634,1180879520.00,3304.657","2022-04-06 13:33,3281.88,3282.11,3282.50,3281.44,1281209,1262680048.00,3304.707","2022-04-06 13:34,3282.66,3281.33,3282.66,3281.13,1107453,1130093328.00,3304.178","2022-04-06 13:35,3281.67,3283.07,3283.21,3281.62,1191534,1205482720.00,3305.193","2022-04-06 13:36,3283.25,3284.98,3285.10,3283.25,2125764,1539697968.00,3306.552","2022-04-06 13:37,3285.13,3285.38,3285.95,3284.86,1845220,1475573680.00,3307.917","2022-04-06 13:38,3285.62,3285.67,3285.72,3284.78,1413448,1271110192.00,3307.755","2022-04-06 13:39,3285.64,3285.74,3285.84,3285.16,1331821,1238125936.00,3307.866","2022-04-06 13:40,3285.35,3284.47,3285.51,3284.09,1433394,1357163136.00,3307.577","2022-04-06 13:41,3284.47,3285.59,3286.03,3284.37,1734380,1465142352.00,3308.020","2022-04-06 13:42,3285.59,3286.37,3286.52,3285.59,1508965,1348668704.00,3308.476","2022-04-06 13:43,3286.37,3287.97,3287.97,3286.37,1924061,1592475296.00,3309.414","2022-04-06 13:44,3287.97,3287.56,3288.11,3287.52,2089530,1499006960.00,3309.584","2022-04-06 13:45,3287.56,3286.39,3288.03,3286.04,1625299,1484998672.00,3308.495","2022-04-06 13:46,3286.39,3286.06,3286.49,3285.97,1413427,1303937072.00,3308.842","2022-04-06 13:47,3286.06,3285.84,3286.27,3285.02,1532082,1332634912.00,3308.117","2022-04-06 13:48,3285.84,3285.98,3286.43,3285.84,1249733,1206488288.00,3308.483","2022-04-06 13:49,3285.98,3285.46,3285.98,3285.23,1278559,1295200400.00,3307.788","2022-04-06 13:50,3285.46,3283.23,3285.46,3283.11,1372651,1384746272.00,3306.604","2022-04-06 13:51,3283.23,3283.47,3283.47,3282.72,1400732,1305494208.00,3306.278","2022-04-06 13:52,3283.47,3284.07,3284.14,3283.16,1373555,1308727024.00,3306.388","2022-04-06 13:53,3284.07,3283.97,3284.31,3283.63,1278764,1236467424.00,3306.345","2022-04-06 13:54,3283.97,3283.37,3284.07,3283.16,1131477,1165915312.00,3306.092","2022-04-06 13:55,3283.37,3282.92,3283.68,3282.92,1185311,1208277536.00,3305.940","2022-04-06 13:56,3282.92,3280.93,3282.92,3280.93,1302514,1325348128.00,3304.734","2022-04-06 13:57,3280.93,3280.94,3281.90,3280.93,1239351,1243683328.00,3304.659","2022-04-06 13:58,3280.94,3281.26,3281.68,3280.40,1247204,1161763040.00,3304.433","2022-04-06 13:59,3281.26,3280.80,3281.48,3280.79,1408699,1256479344.00,3304.270","2022-04-06 14:00,3280.80,3279.02,3280.85,3279.02,1592836,1370484496.00,3303.383","2022-04-06 14:01,3279.02,3277.92,3279.05,3277.57,1886728,1858361264.00,3301.338","2022-04-06 14:02,3277.92,3277.71,3278.10,3277.00,1467673,1375316832.00,3300.851","2022-04-06 14:03,3277.71,3277.88,3277.88,3276.65,1960812,1717317600.00,3300.276","2022-04-06 14:04,3277.88,3277.84,3279.18,3277.84,1729996,1504000352.00,3300.988","2022-04-06 14:05,3277.84,3276.27,3277.84,3275.74,1581043,1672113024.00,3299.010","2022-04-06 14:06,3276.27,3276.45,3276.68,3275.90,1314250,1291926464.00,3298.856","2022-04-06 14:07,3276.45,3275.39,3276.94,3275.39,1189171,1272906544.00,3298.585","2022-04-06 14:08,3275.39,3277.02,3277.06,3275.39,1050842,1116347760.00,3298.739","2022-04-06 14:09,3277.02,3276.40,3277.36,3276.06,1203087,1224133792.00,3298.618","2022-04-06 14:10,3276.40,3278.19,3278.19,3276.22,1096576,1204706832.00,3299.821","2022-04-06 14:11,3278.19,3277.64,3279.58,3277.64,1384086,1386624080.00,3300.480","2022-04-06 14:12,3277.64,3277.61,3277.85,3276.74,1036294,1076085104.00,3300.153","2022-04-06 14:13,3277.61,3278.84,3278.84,3277.24,1075857,1075789632.00,3300.780","2022-04-06 14:14,3278.84,3278.22,3278.85,3277.69,1096025,1115545104.00,3301.064","2022-04-06 14:15,3278.22,3277.06,3278.22,3276.96,1067788,1124326608.00,3300.225","2022-04-06 14:16,3277.06,3273.19,3277.06,3273.06,1879562,1908262512.00,3296.761","2022-04-06 14:17,3273.19,3271.87,3273.19,3271.47,1537764,1522695552.00,3295.743","2022-04-06 14:18,3271.87,3272.81,3272.81,3271.87,1127115,1281384608.00,3296.081","2022-04-06 14:19,3272.81,3272.26,3272.81,3272.26,938440,1047003664.00,3296.083","2022-04-06 14:20,3272.26,3271.83,3272.28,3270.98,1143737,1214168512.00,3295.215","2022-04-06 14:21,3271.83,3270.35,3271.83,3269.90,1258546,1283292720.00,3294.291","2022-04-06 14:22,3270.35,3270.35,3270.71,3269.81,1120881,1221512624.00,3294.057","2022-04-06 14:23,3270.35,3270.10,3270.84,3269.59,1112509,1216310800.00,3293.949","2022-04-06 14:24,3270.10,3269.69,3270.10,3269.05,1149697,1234456032.00,3293.482","2022-04-06 14:25,3269.69,3270.20,3270.33,3269.34,1161789,1280242544.00,3293.821","2022-04-06 14:26,3270.20,3272.10,3272.17,3270.20,1312878,1431423600.00,3295.594","2022-04-06 14:27,3272.10,3272.47,3272.47,3271.48,1130634,1113627280.00,3296.183","2022-04-06 14:28,3272.47,3271.14,3272.47,3270.28,1155546,1219553312.00,3295.516","2022-04-06 14:29,3271.14,3271.18,3271.40,3270.54,946614,1062356672.00,3295.754","2022-04-06 14:30,3271.18,3270.13,3271.18,3270.13,991132,1133915232.00,3295.324","2022-04-06 14:31,3270.13,3269.35,3270.72,3268.54,1179481,1375596832.00,3294.825","2022-04-06 14:32,3269.35,3270.76,3270.76,3269.34,1090091,1252308240.00,3295.617","2022-04-06 14:33,3270.76,3272.51,3272.54,3270.43,1312326,1368421360.00,3297.197","2022-04-06 14:34,3272.51,3272.47,3272.51,3271.96,1186674,1148586112.00,3297.645","2022-04-06 14:35,3272.64,3272.08,3273.15,3271.67,1016703,1110671248.00,3297.501","2022-04-06 14:36,3272.37,3274.52,3274.52,3272.14,1258686,1336722224.00,3298.929","2022-04-06 14:37,3273.90,3274.46,3274.73,3273.90,1101860,1145364576.00,3299.155","2022-04-06 14:38,3274.55,3273.76,3274.74,3273.56,1178379,1228636416.00,3298.732","2022-04-06 14:39,3273.81,3274.99,3274.99,3273.81,1298786,1251273888.00,3299.549","2022-04-06 14:40,3274.77,3276.05,3276.05,3274.77,1229030,1286945952.00,3300.211","2022-04-06 14:41,3275.53,3276.91,3276.91,3275.53,1230434,1344325408.00,3300.639","2022-04-06 14:42,3276.55,3276.04,3277.22,3276.00,1368242,1437119680.00,3300.799","2022-04-06 14:43,3276.16,3276.66,3276.88,3275.86,1202330,1344916240.00,3300.978","2022-04-06 14:44,3276.75,3275.88,3276.80,3275.42,1397677,1442715568.00,3300.312","2022-04-06 14:45,3275.85,3276.24,3276.39,3275.69,1274777,1310426256.00,3300.535","2022-04-06 14:46,3275.95,3276.58,3276.58,3275.76,1591394,1669781696.00,3300.816","2022-04-06 14:47,3276.29,3277.22,3277.39,3276.29,1492010,1524179328.00,3301.501","2022-04-06 14:48,3277.02,3278.40,3278.40,3277.02,1439258,1510284560.00,3302.469","2022-04-06 14:49,3278.26,3278.99,3278.99,3278.17,1714082,1750309856.00,3302.779","2022-04-06 14:50,3278.96,3278.87,3279.33,3278.34,1698746,1670372224.00,3302.967","2022-04-06 14:51,3278.91,3279.25,3279.52,3278.15,2035893,2067468176.00,3303.031","2022-04-06 14:52,3279.45,3279.65,3279.69,3278.83,1999390,1895401072.00,3303.891","2022-04-06 14:53,3279.58,3280.40,3280.40,3279.50,2126643,2072835712.00,3304.370","2022-04-06 14:54,3280.78,3281.22,3281.23,3280.58,2197892,2185963328.00,3304.766","2022-04-06 14:55,3280.80,3281.74,3281.74,3280.80,2402577,2256297120.00,3305.512","2022-04-06 14:56,3281.68,3282.10,3282.56,3281.68,2571738,2512138960.00,3306.285","2022-04-06 14:57,3281.97,3282.05,3282.58,3281.83,2624275,2515342688.00,3307.154","2022-04-06 14:58,3281.99,3281.99,3281.99,3281.99,109821,104692696.00,3307.535","2022-04-06 14:59,3281.99,3281.99,3281.99,3281.99,0,0.00,3307.535","2022-04-06 15:00,3283.43,3283.43,3283.43,3283.43,5460444,5393098752.00,3307.826"]}});
            pattern = r'(?<="data":)(.*?)(?=}\))'
            str_data = re.findall(pattern, content)[0]
            if str_data.lower() == "null":
                return
            dict_data = str_to_dlt(str_data)
            return dict_data

        dict_fund = {"上证指数": "1.000001",
                     "深证成指": "1.399001",
                     "沪深300":  "1.000300",
                     "中小100": "1.399005",
                     "创业板指": "1.399006",
                     "上证50": "1.000016",
                     "深证300": "1.399007",
                     "科创50": "1.000688",
                     "Ｂ股指数": "1.000003",
                     "创业大盘": "1.399293"
                     }
        if not fund_code:
            fund_code = []
            for k, v in dict_fund.items():
                fund_code.append(v)
                # fund_code = ["1.000001","1.000002","1.000003","1.000004","1.000005","1.000006","1.000007","1.000001"]
        ls_dict_data = []
        if isinstance(fund_code, list):
            for code in fund_code:
                url = "http://push2.eastmoney.com/api/qt/stock/trends2/get?secid=%s&fields1=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13&fields2=f51,f52,f53,f54,f55,f56,f57,f58&ut=e1e6871893c6386c5ff6967026016627&iscr=0&cb=cb_1636081485941_61628666&isqhquote=&cb_1636081485941_61628666=cb_1636081485941_61628666" % code
                dict_data = get_data(url)
                if dict_data:
                    ls_dict_data.append(dict_data)
        else:
            url = "http://push2.eastmoney.com/api/qt/stock/trends2/get?secid=%s&fields1=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13&fields2=f51,f52,f53,f54,f55,f56,f57,f58&ut=e1e6871893c6386c5ff6967026016627&iscr=0&cb=cb_1636081485941_61628666&isqhquote=&cb_1636081485941_61628666=cb_1636081485941_61628666" % fund_code
            dict_data = get_data(url)
            ls_dict_data.append(dict_data)
        # for value in ls_dict_data:
        #     print(value)
        # print(len(ls_dict_data))
        # 2022 - 04 - 13 09: 30, 989.66, 989.66, 994.44, 989.66, 20796, 92971949.00, 992.523
        # print(ls_dict_data)
        return ls_dict_data


    def get_fund_manager(self, manager):
        """
        获取基金经理信息
        :param manager:str,基金经理名字
        :return:
        """
        # "http://fund.eastmoney.com/Data/FundDataPortfolio_Interface.aspx?dt=14&mc=returnjson&ft=all&input=经理名字&pn=50&pi=1&sc=abbname&st=asc"
        url = r'http://fund.eastmoney.com/Data/FundDataPortfolio_Interface.aspx?dt=14&mc=returnjson&ft=all&input=%s&pn=50&pi=1&sc=abbname&st=asc' % manager
        content = get_url_response_text(url)
        if not content:
            return False
        # return json
        """var returnjson= {data:[["30655271","蔡嵩松","80049689","诺安基金","001411,002051,002560,320007","诺安创新驱动混合A,诺安创新驱动混合C,诺安和鑫灵活配置混合,诺安成长混合","988","197.36%","320007","诺安成长混合","295.34亿元","197.36%"]],record:1,pages:1,curpage:1}"""
        # pattern = r'(?<=var returnjson= )(.*?)(?=)'
        pattern = r'(?<=var returnjson= {data:)(.*?)(?=,record)'
        json_data_ls = re.findall(pattern, content)
        if json_data_ls:
            manager_dict = {}
            for json_data in json_data_ls:
                data_ls = str_to_dlt(json_data)[0]
            manager_dict["manager_code"] = data_ls[0]
            manager_dict["manager_name"] = data_ls[1]
            manager_dict["company_code"] = data_ls[2]
            manager_dict["company"] = data_ls[3]
            manager_dict["hold_fund_code"] = data_ls[4]
            manager_dict["hold_fund_name"] = data_ls[5]
            manager_dict["hold_day"] = data_ls[6]
            manager_dict["best_profit"] = data_ls[7]
            manager_dict["famous_fund_code"] = data_ls[8]
            manager_dict["famous_fund_name"] = data_ls[9]
            manager_dict["hold_money"] = data_ls[10]

            # for k, v in manager_dict.items():
            #     print("%s:%s" % (k, v))
            return manager_dict
        else:
            return False


if __name__ == "__main__":
    fund_data = FundData()
    # print(fund_data.get_real_fund_data(fund_code="000001"))
    # fund_data.get_dapan_data()
    # fund_data.get_detail_data(fund_code="320007")
    fund_data.get_detail_data(fund_code="002625")
    # print(fund_data.get_detail_data(fund_code="000137"))
    # for _ in range(400):
    #     print(_)
    #     fund_data.get_detail_data(fs_code="320007")

    # url ="http://fund.eastmoney.com/pingzhongdata/000002.js"
    # response = requests.get(url=url)
    # print(response)
    # print(response.status_code)
    # print(response.text)
    # string ="-1.9"
    # print(float(string))
